# exibicao de resultado
fold_change
print(fold_change)
cat(fold_change)
fold_change
# exibicao de resultado
fold_change
print(fold_change)
fold_change * 3
cat(fold_change) * 3
rep(1, 100)
rep(1, 100)
fold_change * 3
cat(fold_change) * 3
cat("o resultado do Fold Change foi de")
print("o resultado do Fold Change foi de")
2 > 3
2 > 3
5<10
5 = 5
5 == 5
expressao_tumor_2 = 10
expressao_normal_2 = 5
x <- data.frame(
amostra = c("A01","B05"),
idade = c(50,45)
)
View(x)
y <- data.frame(
amostra <- c("A01","B05"),
idade <- c(50,45)
)
View(y)
x = data.frame(
amostra = c("A01","B05"),
idade = c(50,45)
)
View(x)
3 < 5
3 <= 5
5 <= 5
5 >= 5
5 != 6
library(dplyr)
data.frame(
amostra = c("A01","B05"),
idade = c(50,45)
) %>% select(amostra)
data.frame(
amostra = c("A01","B05"),
idade = c(50,45)
) %>% select(idade) %>%
mean()
expressao_normal > expressao_tumor
expressao_normal > expressao_tumor == TRUE
c(34,56,78,NA)
mean(c(34,56,78,NA))
mean(c(34,56,78,NA), na.rm = TRUE)
is.na(c(34,56,78,NA))
!is.na(c(34,56,78,NA))
iris
# Níveis de expressão gênica de um gene em diferentes amostras
niveis_expressao <- 10, 5, 12, 8, 15
c(10, 5, 12, 8, 15)
niveis_expressao
# Níveis de expressão gênica de um gene em diferentes amostras
niveis_expressao <- c(10, 5, 12, 8, 15)
niveis_expressao > 10
# Identificação de amostras com expressão acima de 10
amostras_superexpressas <- niveis_expressao > 10
# Exibição do resultado
print(paste("Amostras superexpressas:", amostras_superexpressas)) # Output: Amostras superexpressas: TRUE FALSE TRUE FALSE TRUE
paste("Amostras superexpressas:", amostras_superexpressas)
print(paste("Amostras superexpressas:", amostras_superexpressas))
amostras_superexpressas
niveis_expressao
niveis_expressao[amostras_superexpressas]
# Condições lógicas para expressão gênica e prognóstico
superexpresso <- c(TRUE, FALSE, TRUE, TRUE, FALSE)
# Condições lógicas para expressão gênica e prognóstico
superexpresso <- c(TRUE, FALSE, TRUE, TRUE, FALSE)
mau_prognostico <- c(FALSE, TRUE, TRUE, FALSE, TRUE)
superexpresso
mau_prognostico
superexpresso & mau_prognostico
# Identificação de genes superexpressos e com mau prognóstico
genes_interesse <- superexpresso & mau_prognostico
genes_interesse
# Exibição do resultado
print(paste("Genes de interesse:", genes_interesse)) # Output: Genes de interesse: FALSE FALSE TRUE FALSE FALSE
# Identificação de genes superexpressos e com mau prognóstico
genes_interesse <- superexpresso | mau_prognostico
genes_interesse
# Níveis de expressão gênica de um gene em diferentes amostras
niveis_expressao <- c(10, 5, 12, 8, 15)
names(niveis_expressao) <- c("a","b","c","d","e")
niveis_expressao
names(niveis_expressao)
niveis_expressao > 10
names(niveis_expressao[niveis_expressao > 10])
1:10
30:40
seq(1,10,by=2)
# Criação de uma sequência de números de 1 a 10
posicoes_genoma <- 1:10
posicoes_genoma
# Verificação se um gene específico está presente em uma lista
genes_interesse <- c("GENE1", "GENE2", "GENE3")
genes_interesse
gene_alvo <- "GENE2"
gene_alvo %in% genes_interesse
gene_presente <- gene_alvo %in% genes_interesse
gene_presente
gene_alvo <- "GENE4"
gene_presente <- gene_alvo %in% genes_interesse
gene_presente
gene_alvo <- "GENE1"
gene_presente <- gene_alvo %in% genes_interesse
gene_presente
gene_presente <- "GENE1" %in% genes_interesse
gene_presente
sample(1:10,30)
sample(1:10,30, replace = T)
exp_hla_a <- sample(1:10,30, replace = T)
expr_hla_drb5 <- sample(1:10,30, replace = T)
boxplot(exp_hla_a)
exp_hla_a
exp_hla_a <- sample(1:100,30, replace = T)
expr_hla_drb5 <- sample(1:100,30, replace = T)
boxplot(exp_hla_a)
exp_hla_a
quantile(exp_hla_a)
quantile(exp_hla_a)[2]
quantile(exp_hla_a)
exp_hla_a[exp_hla_a < quantile(exp_hla_a)[2]]
exp_hla_a[exp_hla_a < quantile(exp_hla_a)[2] ∣
exp_hla_a[exp_hla_a < quantile(exp_hla_a)[2] |
exp_hla_a > quantile(exp_hla_a)[4]]
for (i in 1:length(exp_hla_a)) {
exp_hla_a[i] / exp_hla_a[i+1]
}
for (i in 1:length(exp_hla_a)) {
print(exp_hla_a[i] / exp_hla_a[i+1])
}
for (i in 1:length(exp_hla_a)) {
x <- print(exp_hla_a[i] / exp_hla_a[i+1])
print(x[x > 2])
}
letters[a:m]
letters[1:10]
a = 1
m = 11
letters[a:m]
amostras <- sample(40)
amostras[a:m]
paste("jean", a)
paste("jean", amostras)
paste0("jean", amostras)
paste("jean", amostras, sep = "")
paste("jean", amostras, sep = "_")
c(1,3,5)
c(1,3,5, amostras)
"2"
"2" + "2"
iris
head(iris)
head(iris)
summary(iris)
str(iris)
2+2
2+2
iris[1,1]
iris[1,]
amostras[5]
mean(amostras)
mean
median
mean
plot
plot(amostras)
plot
x <- 2
y <- (-2)
y <--2
2+5+7 / 3
7 / 3
5+7 / 3
2+5+7 / 3
(2+5+7) / 3
c("VAR1", "VAR2", "VAR3")
c(0.1, 0.6, 0.3)
frequencia = c(0.1, 0.6, 0.3)
variante = c("VAR1", "VAR2", "VAR3"
"teste")
variante = c("VAR1", "VAR2", "VAR3"
,"teste)"
,"teste2")
variante = c("VAR1", "VAR2", "VAR3")
data.frame(variante = c("VAR1", "VAR2", "VAR3"), frequencia = c(0.1, 0.6, 0.3))
data.frame(variante = c("VAR1", "VAR2", "VAR3"), frequencia = c(0.1, 0.6, 0.3))
variantes <- data.frame(variante = c("VAR1", "VAR2", "VAR3"), frequencia = c(0.1, 0.6, 0.3))
load("~/Drive_googleDrive/artigos/ResendeEtal2025/repository/ResendeEtal2025-TcrBcr-tcgaACC/6-dataExploration/tcgaACC_pre_processed.RData")
class(tcgaACC)
tcgaACC@rowRanges
tcgaACC@rowRanges$external_gene_name
View(variantes)
tamanho_populacao <- 100
tamanho_populacao <- 100
taxa_crescimento <- 1.1
tamanho_maximo <- 1000
tamanho_populacao
tamanho_maximo
100 * 1.1
"l" == "l"
"l" == "L"
tamanho_populacao <- 20
tamanho_populacao <- 100
taxa_crescimento <- 1.1
tamanho_maximo <- 1000
while (tamanho_populacao < tamanho_maximo) { # Enquanto a população for menor que o máximo.
tamanho_populacao <- tamanho_populacao * taxa_crescimento # Aumenta a população.
print(tamanho_populacao) # Mostra o tamanho atual.
}
tamanho_populacao <- 1
taxa_crescimento <- 2
tamanho_maximo <- 1000
while (tamanho_populacao < tamanho_maximo) { # Enquanto a população for menor que o máximo.
tamanho_populacao <- tamanho_populacao * taxa_crescimento # Aumenta a população.
print(tamanho_populacao) # Mostra o tamanho atual.
}
tmp_atual = 1
tmp_max = 10
while(tmp_atual < tmp_max){
print(tmp_atual)
}
while(tmp_atual < tmp_max){
print(tmp_atual)
tmp_atual <- tmp_atual + 1
}
tmp_atual
while(tmp_atual < tmp_max){
print(tmp_atual)
tmp_atual <- tmp_atual + 1
}
tmp_atual = 1
tmp_max = 10
while(tmp_atual < tmp_max){
print(tmp_atual)
tmp_atual <- tmp_atual + 1
}
tmp_atual = 1
tmp_max = 10
while(tmp_atual < tmp_max){
print(tmp_atual)
tmp_atual <- tmp_atual + 1
Sys.time(1)
}
tmp_atual = 1
tmp_max = 10
while(tmp_atual < tmp_max){
print(tmp_atual)
tmp_atual <- tmp_atual + 1
Sys.time(1)
}
c(10, 15, 8, 20, 12)
# Vetor numérico
expressao_genica <- c(10, 15, 8, 20, 12)
expressao_genica
# Vetor numérico
expressao_genica <- c(11, 15, 8, 20, 12)
expressao_genica
c(11, 15, 8, 20, 12)
as.integer(11)
num_11 <- as.integer(11)
num_11
is.integer(num_11)
is.integer(11)
# Vetor numérico
expressao_genica <- c(11, 15, 8, 20, 12)
# Vetor de caracteres
nomes_genes <- c("GeneA", "GeneB", "GeneC", "GeneD", "GeneE")
# Vetor numérico
expressao_genica <- c(11, 15, 8, 20, 12)
# Vetor de caracteres
nomes_genes <- c("GeneA", "GeneB", "GeneC", "GeneD", "GeneE")
# Vetor lógico
resultados_teste <- c(TRUE, FALSE, TRUE, TRUE, FALSE)
print(expressao_genica)
print(nomes_genes)
print(resultados_teste)
expressao_genica
cat(expressao_genica)
cat("o, td bem?")
cat("oi, td bem?")
expressao_genica
expressao_genica[3]
# Acessando o terceiro elemento do vetor de expressão gênica
print(expressao_genica[8])
print(expressao_genica[3])
expressao_genica
expressao_genica > 12
expressao_genica
expressao_genica[expressao_genica > 12]
resultados_teste
resultados_teste
nomes_genes
# Acessando os nomes dos genes que resultaram em TRUE no teste
print(nomes_genes[resultados_teste])
teste <- c(45,67,544,8,NA)
teste
teste[is.na(teste)]
is.na(teste)
teste[is.na(teste)]
!is.na(teste)
is.na(teste)
teste[is.na(teste)==FALSE]
# Acessando os nomes dos genes que resultaram em TRUE no teste
print(nomes_genes[resultados_teste])
# Acessando os nomes dos genes que resultaram em TRUE no teste
print(nomes_genes[resultados_teste==F])
resultados_teste
# Acessando os nomes dos genes que resultaram em TRUE no teste
print(nomes_genes[resultados_teste==T])
# Acessando os nomes dos genes que resultaram em TRUE no teste
print(nomes_genes[resultados_teste==F])
# Acessando os nomes dos genes que resultaram em TRUE no teste
print(nomes_genes[!resultados_teste])
expressao_genica
expressao_genica * 2
expressao_genica_teste <- expressao_genica[2] * 2
rm(expressao_genica_teste)
expressao_genica[2] * 2
expressao_genica
expressao_genica[2]
expressao_genica[2] * 2
expressao_genica + 2
expressao_genica + expressao_genica
expressao_genica + expressao_genica[-5]
expressao_genica
expressao_genica[-5]
expressao_genica + expressao_genica[-5]
expressao_genica + c(1:10)
expressao_genica + expressao_genica[-5]
expressao_genica + expressao_genica[-5]
expressao_genica + c(1:10)
expressao_genica
1:10
expressao_genica + c(1:11)
expressao_genica + c(1:10)
expressao_genica > 10
expressao_genica
names(expressao_genica)
names(expressao_genica) <- nomes_genes
expressao_genica
expressao_genica * 2
count <- sample(1000)
count
expressao_genica
as.matrix(expressao_genica)
expressao_genica
# Matriz com dados de expressão gênica
matriz_expressao <- matrix(expressao_genica)
matriz_expressao
class(matriz_expressao)
class(expressao_genica)
typeof(matriz_expressao)
is.vector(expressao_genica)
class(expressao_genica)
typeof(expressao_genica)
head(expressao_genica)
expressao_genica
head(expressao_genica, 2)
head(iris$Sepal.Length)
iris$Sepal.Length
rm(list = ls())
version
packageVersion("GenomicDataCommons")
packageVersion("TCGAbiolinks")
packageVersion(IOBR)
packageVersion("IOBR")
packageVersion("immunarch")
packageVersion("survival")
packageVersion("survminer")
packageVersion("ComplexHeatmap")
packageVersion("igraph")
version
2+2
library(cluster, lib.loc = "C:/Program Files/R/R-4.5.1/library")
detach("package:cluster", unload = TRUE)
?mean
2+2
2+2
2+2
3-1
4-2
rep(1,100)
?mean
?rep
rep(1,100)
print(1)
print('Olá Mundo')
print("Olá Mundo")
# Proximo codigo imprime texto na tela
print('Olá Mundo')
Proximo codigo imprime texto na tela
# Proximo codigo imprime texto na tela
print('Olá Mundo') # imprime ola mundo
2+2
4-1
5-3
2+2
2+2
2+2
2+2
setwd("~/Drive_googleDrive/Repository_GitHub/Programando_em_R")
# Níveis de expressão de 5 genes (GeneA, GeneB, GeneC, GeneD, GeneE) em duas amostras (Amostra1, Amostra2)
# Os valores representam a expressão relativa, por exemplo, de um experimento de RNA-seq.
expressoes_genicas <- data.frame(
Gene = c("GeneA", "GeneB", "GeneC", "GeneD", "GeneE"),
Amostra1 = c(1.5, 0.8, 3.2, 0.5, 2.1),
Amostra2 = c(1.2, 1.0, 2.8, 0.7, 1.9)
)
# Presença/ausência de mutações em 5 regiões genômicas (Regiao1 a Regiao5)
# 1 indica mutação presente, 0 indica mutação ausente
mutacoes_genomicas <- c(0, 1, 0, 1, 0)
# Vetor de identificadores de amostras
ids_amostras <- c("AM101", "AM102", "AM103", "AM104", "AM105")
print("Tabela de Expressão Gênica:")
print(expressoes_genicas)
print("Vetor de Mutações Genômicas:")
print(mutacoes_genomicas)
print("Vetor de IDs de Amostras:")
print(ids_amostras)
# -- Operadores de Atribuicao --
# Criando um novo objeto para armazenar a média das expressões da Amostra1
media_exp_amostra1 <- mean(expressoes_genicas$Amostra1)
print(paste("Média de expressão na Amostra1:", media_exp_amostra1))
# Atribuindo um novo nome para uma coluna para facilitar a análise
expressoes_genicas$Razao_A2_A1 = expressoes_genicas$Amostra2 / expressoes_genicas$Amostra1
print("Tabela de Expressão Gênica com Razão A2/A1:")
print(expressoes_genicas)
## -- Operadores Aritmeticos --
# Calcular a diferença de expressão entre Amostra2 e Amostra1 para cada gene
expressoes_genicas$Diferenca_A2_A1 <- expressoes_genicas$Amostra2 - expressoes_genicas$Amostra1
print("Tabela de Expressão Gênica com Diferença A2-A1:")
print(expressoes_geneicas)
print(expressoes_genicas)
# Se tivéssemos contagens de reads e quiséssemos calcular o total
contagens_reads_geneA <- c(1000, 1500) # Contagens para GeneA em duas amostras
total_reads_geneA <- contagens_reads_geneA[1] + contagens_reads_geneA[2]
print(paste("Total de reads para GeneA:", total_reads_geneA))
# Um exemplo de resto da divisão, útil se você estivesse processando algo em blocos
# Por exemplo, se você tem 17 sequências e quer processar em grupos de 5
num_sequencias <- 17
tamanho_grupo <- 5
restante <- num_sequencias %% tamanho_grupo
print(paste("Sequências restantes após agrupar de 5 em 5:", restante))
## -- Operadores Relacionais --
# Quais genes têm expressão na Amostra1 maior que 2.0?
genes_altamente_expressos_A1 <- expressoes_genicas$Gene[expressoes_genicas$Amostra1 > 2.0]
print(paste("Genes com expressão na Amostra1 > 2.0:",
paste(genes_altamente_expressos_A1, collapse = ", ")))
# Quais regiões genômicas NÃO têm mutação?
regioes_sem_mutacao <- ids_amostras[mutacoes_genomicas == 0]
print(paste("Regiões genômicas sem mutação (IDs de amostras):",
paste(regioes_sem_mutacao, collapse = ", ")))
# Filtrar genes onde a Amostra2 tem expressão significativamente diferente da Amostra1 (ex: diferença > 0.5 ou < -0.5)
genes_diferencialmente_expressos <- expressoes_genicas$Gene[
expressoes_genicas$Diferenca_A2_A1 > 0.5 |
expressoes_genicas$Diferenca_A2_A1 < -0.5]
print(paste("Genes com diferença de expressão significativa:",
paste(genes_diferencialmente_expressos, collapse = ", ")))
## -- Operadores Lógicos --
# Genes que são altamente expressos na Amostra1 (>1.0) E na Amostra2 (>1.0)
genes_expressos_ambas <- expressoes_genicas$Gene[
expressoes_genicas$Amostra1 > 1.0 & expressoes_genicas$Amostra2 > 1.0]
print(paste("Genes expressos em ambas as amostras (>1.0):",
paste(genes_expressos_ambas, collapse = ", ")))
# Genes com expressão baixa na Amostra1 (<1.0) OU na Amostra2 (<1.0)
genes_baixa_exp_uma_amostra <- expressoes_genicas$Gene[
expressoes_genicas$Amostra1 < 1.0 |
expressoes_genicas$Amostra2 < 1.0]
print(paste("Genes com baixa expressão em pelo menos uma amostra (<1.0):",
paste(genes_baixa_exp_uma_amostra, collapse = ", ")))
# Usando && e || (para avaliar apenas o primeiro elemento, menos comum para filtragem direta de vetores inteiros, mas útil em condições de fluxo de controle)
# Exemplo: Se a primeira mutação for 0 E a expressão do primeiro gene na Amostra1 for > 1.0
if (mutacoes_genomicas[1] == 0 && expressoes_genicas$Amostra1[1] > 1.0) {
print("A primeira região não tem mutação E o primeiro gene é altamente expresso na Amostra1.")
}
# Criar uma sequência de posições genômicas de 100 a 110
posicoes_genomicas <- 100:110
print(paste("Sequência de posições genômicas:", paste(posicoes_genomicas, collapse = ", ")))
# Acessar um subconjunto de genes (por exemplo, do GeneB ao GeneD)
# Isso pode ser feito usando índices numéricos ou lógicos
# Nesse caso, vamos usar indices numéricos para demonstrar o ':'
genes_subconjunto <- expressoes_genicas[2:4, ] # Linhas 2 a 4, todas as colunas
print("Subconjunto de genes (GeneB a GeneD):")
print(genes_subconjunto)
# Exemplo 1: Repetir um identificador de controle para várias amostras
# Imagine que temos 50 amostras e queremos atribuir "Controle" a cada uma delas.
rep("Controle", 50)
# Exemplo 2: Repetir um conjunto de tratamentos para um experimento de replicacao
# Se tivermos 3 tratamentos (A, B, C) e queremos 4 replicas de cada um.
rep(c("TratamentoA","TratamentoB","TratamentoC"), 4)
# Exemplo 3: Gerar sequencias de coordenadas genomicas
# Para um gene que se estende da posicao 1000 a 1010 em um cromossomo.
posicoes_gene <- 1000:1010
print(posicoes_gene)
# Exemplo 4: Criar IDs numericos para amostras
# De 1 a 20 para 20 amostras de sequenciamento
ids_amostras_num <- 1:20
print(ids_amostras_num)
